+==================================+
|         Token Definition         |
+==================================+
 ID     Name           Regex
--------------------------------------------
 -1     Undefined       
  0     EoF
  1     Comment         \;.*\n
  2     IntNumber       (\+|\-)?\d+
  3     FloatNumber     (\+|\-)?\d+(\.\d+)?
  4     Identifier      [^\[\]\{\}\(\)\s0-9\+\-\#\"][^\[\]\{\}\(\)\s\#]* | [\+\-][^0-9\[\]\{\}\(\)\s]*
  5     BooleanTrue     \#t
  6     BooleanFalse    \#f
  7     String          \"([^\"]|(\\[\"\'\?\\abfnrtv]))*\"
* 8     Text            [^\n]*
* 9     EmptyLine       \n
  
 10     SymbolBracketL  \[
 11     SymbolBracketR  \]
 12     SymbolCurlyL    \{
 13     SymbolCurlyR    \}
 14     SymbolRoundL    \(
 15     SymbolRoundR    \)
 16     SymbolQuote     \'
--------------------------------------------
*: These types of tokens are only available in "text mode" that after a SymbolCurlyL



+==================================+
|           AST Definition         |
+==================================+
 ID  AST Node Name      Syntax Rule
--------------------------------------------
  0  comment         := <Token::Comment>

     symbol          := <Token::SymbolQuote><Token::Identifier>

  1  atom            := <Token::Identifier>
                     |  <Token::IntNumber>
                     |  <Token::FloatNumber>
                     |  <Token::BooleanTrue>
                     |  <Token::BooleanFalse>
                     |  <Token::String>
                     |  <symbol>
  
* 2  textstring      := <Token::Text>+
  3  textlineend     := <Token::EmptyLine>+
  4  text            := <Token::SymbolCurlyL> (<textstring>|<textlienend>|<sexpression>)* <Token::SymbolCurlyR>

  5  list            := <Token::SymbolRoundL> <sexpression>* <Token::SymbolRoundR>
  6  sexpression_list:= <Token::SymbolBracketL> <sexpression>+ <Token::SymbolBracketR>
  7  sexpression     := <atom>
                     |  <text>
                     |  <list>
                     |  <sexpression_list>
                     |  <comment>
--------------------------------------------
* The content of Token::Text will be concatenated.