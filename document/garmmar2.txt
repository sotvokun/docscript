+==================================+
|         Token Definition         |
+==================================+
 ID     Name           Regex
--------------------------------------------
 -1     Undefined
  0     EoF
  1     Comment         \;(.*)\n
  2     Integer         (\+|\-)?\d+
  3     Decimal         (\+|\-)?\d+\.\d+
  4     SimpleName      
  5     ComplexName     \|(([^\|\n]|(\\[\"\'\?\\abfnrtv]))*)\|
  6     BooleanTrue     \#t
  7     BooleanFalse    \#f
  8     String          \"([^\"]|(\\[\"\'\?\\abfnrtv]))*\"
* 9     Text            [^\n]*
*10     EmptyLine       \n

 20     BracketSquareL  \[
 21     BracketSquareR  \]
 22     BracketCurlyL   \{
 23     BracketCurlyR   \}
 24     BracketRoundL   \(
 25     BracketRoundR   \)
 
 30     SymbolQuote     \'
 31     SymbolBackquote \`
 32     SymbolComma     \,
--------------------------------------------
*: These types of tokens are only available in "text mode" that after a BracketCurlyL



+==================================+
|         Syntax Definition        |
+==================================+
 ID     Syntax unit name            Syntax Rule
--------------------------------------------
  0     comment                 :=  <Token::Comment>
        name                    :=  <Token::SimpleName>
                                |   <Token::ComplexName>

  1     atom                    :=  <name>
                                |   <Token::Integer>
                                |   <Token::Decimal>
                                |   <Token::BooleanTrue>
                                |   <Token::BooleanFalse>
                                |   <Token::String>

* 2     textstring              :=  <Token::Text>
  3     textlineend             :=  <Token::EmptyLine>+
  4     text                    :=  <Token::BracketCurlyL> (<textstring> | <textlineend> | <sexpression>)* <Token::BracketCurlyR>

  5     roundlist               :=  <Token::BracketRoundL> <sexpression>* <Token::BracketRoundR>
  6     squarelist              :=  <Token::BracketSquareL> <sexpression>* <Token::BracketSquareR>
  7     quote                   :=  <Token::SymbolQuote> <sexpression>
  8     quasiquote              :=  <Token::SymbolBackquote> <sexpression>
  9     unquote                 :=  <Token::SymbolComma> <sexpression>
 10     sexpression             :=  <comment>
                                |   <atom>
                                |   <text>
                                |   <roundlist>
                                |   <squarelist>
                                |   <quote>
                                |   <quasiquote>
                                |   <unquote>